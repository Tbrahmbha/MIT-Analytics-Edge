10
}
x <- 1:10
if(x > 5) {
x <- 0
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory)) ## setting the directory
total = 0                            ## the sum of all observed values of pollutant (either sulfate or nitrate)
observations = 0                     ## the total number of observed values of pollutant (either sulfate or nitrate)
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
## depending the poluttant ( sulfate or nitrate), we aggregate the observed values
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
pollutantmean("specdata","sulfate", 1:30)
pollutantmean("specdata","sulfate", 1:30)
getwd()
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory)) ## setting the directory
total = 0                            ## the sum of all observed values of pollutant (either sulfate or nitrate)
observations = 0                     ## the total number of observed values of pollutant (either sulfate or nitrate)
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
## depending the poluttant ( sulfate or nitrate), we aggregate the observed values
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
5+5
5 + 5 =
sum(5,6)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory))
total = 0
observations = 0
for (i in id)
{
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
getwd()
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
pollutantmean <- function(directory, pollutant, id = 1:332) {}
pollutantmean <- function(directory, pollutant, id = 1:332) {}
pollutantmean <- function(directory, pollutant, id = 1:332) {  }
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory))
total = 0
observations = 0
for (i in id)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory))
total = 0
observations = 0
for (i in id)
{
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
if (pollutant == "sulfate") {
total = total + sum(data$sulfate)
}
else {total = total + sum(data$nitrate)}
}
pollutantmean()
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory))
total = 0
observations = 0
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory))
total = 0
observations = 0
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
if(!file.exists("rprog-data-specdata.zip")) {
temp <- tempfile()
download.file("https://eventing.coursera.org/api/redirectStrict/lv2sGEoCHrTmTWiIqmqZLZ-xPPcYPeUmkj3f905vAu1YYh64KGYddOlHxrvnjYc--UXddqKsXzVD3IhElUjGrw.UgoOCgjdmmTFxkyiRHliaw._1YVDGQhyn50ifKIx6-FfQzMEn6slhZ8y3Zhyj8SdHBJBFOyIiy9irLbEHs5MavHSkEwTaVeo9LnlMSSniBP6FrwIvFeBBn5sKpiSqWdEFEz03NTaEBmwLBO3_FTnMmgALDkRdM-F-SNJJulDQTyQxEwSWeRUbRSrG-_BY-dmyA5XPZcxI52ReVO6eszFqpGxyI_KInBkc2lETLNcv9w0eQhkJH3ZfCudm3YsH3HH1eGuRu8jS85oz22GadmwWtAoKhuuE9Wrj6pYcVN8Gxo-UiihPlgXsH1uhWMS7gPOml5RFHw3s97Pi8CiX5CvGrqgVn7gV2qOgVqwb_TP3h9Vzj6k93gwR19qwH6khcAScR_lJgV-bnyS3yn1P3VoqDo",temp)
unzip(temp)
unlink(temp)
}
if(!file.exists("rprog-data-specdata.zip")) {
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip",temp)
unzip(temp)
unlink(temp)
}
pollutantmean<-function(directory,pollutant,id=1:332){
idIndex<-id
rawdataset<-combine(idIndex,directory)
cleandataset<-rawdataset[!is.na(rawdataset[c(pollutant)]),c(pollutant)]
result<-mean(cleandataset)
}
combine<-function(idIndex,directory){
startI<-1
endI<-length(idIndex)
binded<-data.frame("mean"=integer(0))
while(startI<=endI){
otherDataset<-read.csv(formatFileName(idIndex[startI],directory),header=TRUE)
binded<-rbind(binded,otherDataset)
startI<-startI+1
}
binded
}
formatFileName<-function(fileName,directory){
if(nchar(fileName)==1){
dir<-paste("./",directory,"/","00",fileName,".csv",sep="")
}
else if (nchar(fileName)==2){
dir<-paste("./",directory,"/","0",fileName,".csv",sep="")
}
else if (nchar(fileName)==3){
dir<-paste("./",directory,"/",fileName,".csv",sep="")
}
}
pollutantmean("specdata","sulfate", 1:10)
sample1 <- pollutantmean("specdata","sulfate", 1:10)
sample1
complete<-function(directory,id=1:332){
idIndex<-id
startI<-1
endI<-length(idIndex)
completeObs<-data.frame("id"=character(0),"nobs"=integer(0))
while(startI<=endI){
rawdataset<-read.csv(formatFileName(idIndex[startI],directory),header=TRUE)
cleandataset<-rawdataset[complete.cases(rawdataset),]
newObs<-data.frame("id"=idIndex[startI],"nobs"=nrow(cleandataset))
completeObs<-rbind(completeObs,newObs)
startI<-startI+1
}
completeObs
}
formatFileName<-function(fileName,directory){
if(nchar(fileName)==1){
dir<-paste("./",directory,"/","00",fileName,".csv",sep="")
}
else if (nchar(fileName)==2){
dir<-paste("./",directory,"/","0",fileName,".csv",sep="")
}
else if (nchar(fileName)==3){
dir<-paste("./",directory,"/",fileName,".csv",sep="")
}
}
samppart2 <- complete("specdata", 1:10)
samppart2
corr<-function(directory,threshold=0){
completeObs<-complete(directory)
corVector<-vector()
val<-1
stop<-nrow(completeObs)
while(val <= stop){
if(completeObs[val,c("nobs")]>threshold){
rawdataset<-read.csv(formatFileName(completeObs[val,c("id")],directory),header=TRUE)
cleandataset<-rawdataset[complete.cases(rawdataset),]
x<-cleandataset[,c("sulfate")]
y<-cleandataset[,c("nitrate")]
corVector<-c(corVector,cor(x,y))
}
val<-val+1
}
corVector
}
formatFileName<-function(fileName,directory){
if(nchar(fileName)==1){
dir<-paste("./",directory,"/","00",fileName,".csv",sep="")
}
else if (nchar(fileName)==2){
dir<-paste("./",directory,"/","0",fileName,".csv",sep="")
}
else if (nchar(fileName)==3){
dir<-paste("./",directory,"/",fileName,".csv",sep="")
}
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
sample1
sample2 <- pollutantmean("specdata","nitrate", 70:72)
sample2
sample3 <- pollutantmean("specdata","sulfate", 34)
sample3
nitrate <- pollutantmean("specdata","nitrate")
nitrate
allnitrate <- pollutantmean("specdata","nitrate")
wholesample <- pollutantmean("specdata","nitrate", 1:332)
cc <- complete("specdata",c(,10,20,34,100,200,310))
cc <- complete("specdata",c(10,20,34,100,200,310))
print(cc)
print(cc%nobs)
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
?gl()
?sapply()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors , sum)
sapply(flag_colors , sum)
sapply(flag_colors , mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes , range)
shape_mat <- sapply(flag_shapes, range)
shapes_mat
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
sepal.length
sapply(sepal.length, mean)
sapply(iris$sepal.length, mean)
list()
quiz1 <- sapply(iris$sepal.length, mean)
quiz1
tapply(iris, mean)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$virginica, mean)
lapply(iris$Sepal.Length, iris$virginica, mean)
virginica <- iris$virginica
summary(iris)
tapply(iris$Sepal.Length, Species$virginica, mean)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
?apply
library(datasets)
data(mtcars)
summary(mtcars)
apply(mtcars,2,mean)
mean(mtcar$mpg, mtcar$cyl)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg,mtcars$cyl), mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$hp,mtcars$cyl), mean)
209.21429 - 82.63636
debug(ls)
ls
ls()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
install_course("R Programming")
swirl()
install_course("Getting and Cleaning Data")
install_course("Data Science and R")
install_course("Data Science and R")
install_course("The R Programming Environment")
install_course("Statistical Inference")
install_course("Advanced R Programming")
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14) <- z
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
sd(c(5,8,12))
which.min(c(4,1,6))
c(2,3,5,8,13)
Country = c("Brazil","China","India", "Switzerland", "USA")
LifeExpectancy = c(74,76,65,83,79)
Country
LifeExpectancy
Country[1]
LifeExpectancy[3]
seq(0,100,2)
CountryData = data.frame(Country,LifeExpectancy)
CountryData
View(CountryData)
CountryData$Population= c(199000,1390000,1240000,7997,318000)
CountryData
Country = c("Australia","Greece")
LifeExpectancy = c(82,81)
population = c(23050,11125)
NewCountryData = data.frame(Country,LifeExpectancy,population)
NewCountryData
AllCountryData = rbind(CountryData,NewCountryData)
AllCountryData = rbind(CountryData,NewCountryData)
CountryData
NewCountryData
rm(NewCountryData)
Population = population
NewCountryData = data.frame(Country,LifeExpectancy,Population)
AllCountryData = rbind(CountryData,NewCountryData)
AllCountryData
setwd("/Users/Brahmbha/Google Drive/P/Programming/The Analytics Edge (EDx)/Unit 1")
setwd("~/Google Drive/P/Programming/The Analytics Edge (EDx)/Unit 1 ")
getwd()
WHO <- read.csv("WHO.csv")
str(WHO)
Summary("WHO")
Summary(WHO)
summary(WHO)
View(WHO)
View(WHO)
WHO_Europe = subset(WHO, Region == "Europe")
str(WHO_Europe)
write.csv(WHO_Europe, "WHO_Europe.csv")
ls()
rm(WHO_Europe)
ls
ls()
Under15
WHO$Under15
mean(WHO$Under15)
sd(WHO$Under15)
summary(WHO$Under15)
which.min(WHO$Under15)
WHO$Country(86)
WHO$Country(86)
WHO$Country[86]
which.max(WHO$Under15)
WHO$Country[124]
plot(WHO$GNI, WHO$FertilityRate)
Outliers = subset(WHO,GNI > 10,000 & FertilityRate > 2.5)
Outliers
nrow(Outliers)
Outliers = subset(WHO,GNI > 10000 & FertilityRate > 2.5)
nrow(Outliers)
Outliers(c("Country", "GNI", "FertilityRate"))
Outliers[c("Country", "GNI", "FertilityRate")]
mean(WHO$Over60)
min(WHO$Over60)
WHO$Country[.81]
summary(WHO$Over60)
Which.min(WHO$Over60)
which.min(WHO$Over60)
WHO$Country[183]
which.max(WHO$LiteracyRate)
WHO$Country[44]
hist(WHO$CellularSubscribers)
boxplot(WHO$LifeExpectancy~ WHO$Region)
boxplot(WHO$LifeExpectancy~ WHO$Region, xlab= "", ylab="Life Expectancy")
boxplot(WHO$LifeExpectancy~ WHO$Region, xlab= "", ylab="Life Expectancy", main="Life Expectancy of Countries by Region")
table(WHO$Region)
tapply(WHO$Over60, WHO$Region, Mean)
tapply(WHO$Over60, WHO$Region, mean)
tapply(WHO$LiteracyRate, WHO$Region, min)
tapply(WHO$LiteracyRate, WHO$Region, min, na.rm=TRUE)
tapply(WHO$ChildMortality, WHO$Region, mean, na.rm=TRUE)
tapply(WHO$Over60, WHO$Region, mean)
